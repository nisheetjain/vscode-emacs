#!/usr/bin/env node

var remote = require('gulp-remote-src');
var vzip = require('gulp-vinyl-zip');
var symdest = require('gulp-symdest');
var path = require('path');
var cp = require('child_process');
var fs = require('fs');
var shared = require('../lib/shared');

var testRunFolder = '.vscode-test';
var testRunFolderAbsolute = path.join(process.cwd(), testRunFolder);

var version = process.env.CODE_VERSION || '*';

var platform = (process.platform === 'darwin') ? 'darwin' : 'linux-x64';

var darwinExecutable = path.join(testRunFolderAbsolute, 'Visual Studio Code.app', 'Contents', 'MacOS', 'Electron');
var linuxExecutable = path.join(testRunFolderAbsolute, 'VSCode-linux-x64', 'code');
if (['0.10.1', '0.10.2', '0.10.3', '0.10.4', '0.10.5', '0.10.6', '0.10.7', '0.10.8', '0.10.9'].indexOf(version) >= 0) {
    linuxExecutable = path.join(testRunFolderAbsolute, 'VSCode-linux-x64', 'Code');
}

var testsFolder;
if (process.env.CODE_TESTS_PATH) {
    testsFolder = process.env.CODE_TESTS_PATH;
} else if (fs.existsSync(path.join(process.cwd(), 'out', 'test'))) {
    testsFolder = path.join(process.cwd(), 'out', 'test'); // TS extension
} else {
    testsFolder = path.join(process.cwd(), 'test'); // JS extension
}

var testsWorkspace = process.env.CODE_TESTS_WORKSPACE || testsFolder;

console.log('### VS Code Extension Test Run ###');
console.log('Current working directory: ' + process.cwd());

function runTests() {
    var executable = (process.platform === 'darwin') ? darwinExecutable : linuxExecutable;
    var args = [
        testsWorkspace,
        '--extensionDevelopmentPath=' + process.cwd(),
        '--extensionTestsPath=' + testsFolder
    ];

    console.log('Running extension tests: ' + [executable, args.join(' ')].join(' '));

    var cmd = cp.spawn(executable, args);

    cmd.stdout.on('data', function (data) {
        console.log(data.toString());
    });

    cmd.stderr.on('data', function (data) {
        console.error(data.toString());
    });

    cmd.on('error', function (data) {
        console.log('Failed to execute tests: ' + data.toString());
    });

    cmd.on('close', function (code) {
        console.log('Tests exited with code: ' + code);

        if (code !== 0) {
            process.exit(code); // propagate exit code to outer runner
        }
    });
}

function downloadExecutableAndRunTests() {
    getDownloadUrl(function (downloadUrl) {
        console.log('Downloading VS Code into "' + testRunFolderAbsolute + '" from: ' + downloadUrl);

        var stream = remote(downloadUrl, { base: '' })
            .pipe(vzip.src())
            .pipe(symdest(testRunFolder));

        stream.on('end', runTests);
    });
}

function getDownloadUrl(clb) {
    if (process.env.CODE_DOWNLOAD_URL) {
        return clb(process.env.CODE_DOWNLOAD_URL);
    }

    getTag(function (tag) {
        return clb(['https://vscode-update.azurewebsites.net', tag, platform, 'stable'].join('/'));
    });
}

function getTag(clb) {
    if (version !== '*') {
        return clb(version);
    }

    shared.getContents('https://vscode-update.azurewebsites.net/api/releases/stable/' + platform, function (error, tagsRaw) {
        if (error) {
            exitWithError(error);
        }

        try {
            clb(JSON.parse(tagsRaw)[0]); // first one is latest
        } catch (error) {
            exitWithError(error);
        }
    });
}

fs.exists(testRunFolderAbsolute, function (exists) {
    if (exists) {
        runTests();
    } else {
        downloadExecutableAndRunTests();
    }
});

function exitWithError(error) {
    console.error('Error running tests: ' + error.toString());
    process.exit(1);
}